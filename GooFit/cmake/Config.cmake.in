@PACKAGE_INIT@

include("${CMAKE_CURRENT_LIST_DIR}/@TARGETS_EXPORT_NAME@.cmake")

function(goofit_add_library GNAME)
  if(GOOFIT_DEVICE STREQUAL CUDA)
    foreach(N ${ARGN})
      SET_SOURCE_FILES_PROPERTIES(${N} PROPERTIES CUDA_SOURCE_PROPERTY_FORMAT OBJ)
    endforeach()
    # defined in CUDA_safe_add_libraryAndExe.cmake
    cuda_add_more_library(${GNAME} STATIC ${ARGN})
  else()
    foreach(N ${ARGN})
      SET_SOURCE_FILES_PROPERTIES(${N} PROPERTIES LANGUAGE CXX)
    endforeach()
    add_library(${GNAME} STATIC ${ARGN})
    target_compile_options(${GNAME} PUBLIC -x c++)
  endif()
endfunction()


macro(INITIALIZE_GOOFIT)
    ### Options ###
    set(DEVICE_LISTING CUDA OMP CPP TBB Auto)
    set(HOST_LISTING OMP CPP TBB Auto)
    mark_as_advanced(DEVICE_LISTING HOST_LISTING)

    set(GOOFIT_DEVICE Auto CACHE STRING "The compute device, options are ${DEVICE_LISTING}")
    set(GOOFIT_HOST Auto CACHE STRING "The compute device, options are ${HOST_LISTING}")

    # Requires CMake 3.3 or greater
    if(NOT ${GOOFIT_DEVICE} IN_LIST DEVICE_LISTING)
        message(FATAL_ERROR "You must select a device from ${DEVICE_LISTING}, not ${GOOFIT_DEVICE}")
    endif()
    if(NOT ${GOOFIT_HOST} IN_LIST HOST_LISTING)
        message(FATAL_ERROR "You must select a host from ${HOST_LISTING}, not ${HOST_DEVICE}")
    endif()

    if(GOOFIT_DEVICE STREQUAL Auto)
        find_package(CUDA 6.0)
        if(CUDA_FOUND)
            set(GOOFIT_DEVICE CUDA CACHE STRING "The compute device, options are ${DEVICE_LISTING}" FORCE)
        else()
            find_package(OpenMP)
            if(OpenMP_CXX_FOUND OR OpenMP_FOUND)
                set(GOOFIT_DEVICE OMP CACHE STRING "The compute device, options are ${DEVICE_LISTING}" FORCE)
            else()
                set(GOOFIT_DEVICE CPP CACHE STRING "The compute device, options are ${DEVICE_LISTING}" FORCE)
            endif()
        endif()
        message(STATUS "Auto device selection: ${GOOFIT_DEVICE}")
    endif()

    if(GOOFIT_HOST STREQUAL Auto)
        if(GOOFIT_DEVICE STREQUAL OMP)
            set(GOOFIT_HOST OMP)
        elseif(GOOFIT_DEVICE STREQUAL TBB)
            set(GOOFIT_HOST TBB)
        else()
            set(GOOFIT_HOST CPP)
        endif()
        message(STATUS "Auto host selection: ${GOOFIT_HOST}")
    endif()

    add_definitions("-DTHRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_${GOOFIT_DEVICE}")
    add_definitions("-DTHRUST_HOST_SYSTEM=THRUST_HOST_SYSTEM_${GOOFIT_HOST}")
    option(GOOFIT_SEPARATE_COMP "Enable separate compilation of PDFs" ON)

    if(GOOFIT_SEPARATE_COMP)
        add_definitions("-DSEPARABLE")
    endif()

    #set (CMAKE_CXX_FLAGS "-g ${CMAKE_CXX_FLAGS}")
    find_package(ROOT REQUIRED COMPONENTS Minuit)
    include_directories(AFTER SYSTEM "${ROOT_INCLUDE_DIRS}")
    include_directories(AFTER SYSTEM "${GOOFIT_INCLUDE_DIRS}")
    #include(${ROOT_USE_FILE}) # this command will change compiler flags..
    include(${ROOT_USE_FILE}/../modules/RootNewMacros.cmake)

    if(GOOFIT_DEVICE STREQUAL CUDA)
        if(NOT CUDA_FOUND)
            find_package(CUDA 6.0 REQUIRED)
        endif()
        set(CUDA_NVCC_FLAGS; ${CUDA_NVCC_FLAGS}; -std=c++11; ${CMAKE_CXX_FLAGS})
        set(CUDA_SEPARABLE_COMPILATION ON)

        cuda_select_nvcc_arch_flags(ARCH_FLAGS ${GOOFIT_ARCH})
        list(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})
        message(STATUS "Compiling for GPU arch: ${ARCH_FLAGS}")

        if(ARCH_FLAGS MATCHES "20|21|30|32")
            message(STATUS "Removing GPU Arch 3.5+ features")
        else()
            message(STATUS "Activating GPU Arch 3.5+ features")
            add_definitions("-DTARGET_SM35")
        endif()
    else()
        include_directories(${PROJECT_SOURCE_DIR}/include/goofit/fakecuda)
    endif()

    if(GOOFIT_DEVICE STREQUAL OMP OR GOOFIT_HOST STREQUAL OMP)
        find_package(OpenMP REQUIRED)
        link_libraries(OpenMP::OpenMP_CXX)
        find_package(Threads REQUIRED)
        link_libraries(Threads::Threads)
    endif()

    if(GOOFIT_DEVICE STREQUAL TBB OR GOOFIT_HOST STREQUAL TBB)
        find_package(TBB REQUIRED)
        include_directories(SYSTEM "${TBB_INCLUDE_DIRS}")
    endif()
    if(GOOFIT_DEVICE STREQUAL CUDA)
        list(APPEND CMAKE_MODULE_PATH ${GOOFIT_LIBRARY_DIRS}/cmake)
        include(CUDAsafeAddLibraryAndExe) # written by Xuefeng
    else()
        macro(CUDA_GEN_GPU_LIBRARY cuda_target)
            add_library(${cuda_target} INTERFACE)
        endmacro()
    endif()
endmacro()
set ( CUDA_ALL_SEPARABLE_COMPILATION_OBJECTS "@PACKAGE_CUDA_ALL_SEPARABLE_COMPILATION_OBJECTS@")
set_and_check ( GOOFIT_INCLUDE_DIRS "@PACKAGE_GOOFIT_INCLUDE_DIRS@")
set_and_check ( GOOFIT_LIBRARY_DIRS "@PACKAGE_GOOFIT_LIBRARIES@")
check_required_components("@PROJECT_NAME@")
